import json
import pprint
import os
from log_analyzer.etl import run_pipeline

def run_and_show_results(save_to_db=True):
    """
    Ponto de entrada program√°tico para executar o pipeline ETL simplificado
    e exibir os resultados. Ideal para uso em notebooks.

    Args:
        save_to_db: Se True, tenta salvar os resultados no banco de dados.
                    Se False, apenas salva em arquivos locais.
                    
    Returns:
        dict: Um dicion√°rio contendo as m√©tricas geradas.
    """
    print("Iniciando a an√°lise de logs atrav√©s do pipeline simplificado (execu√ß√£o local)...")

    # Executa o pipeline completo com os caminhos padr√£o
    result = run_pipeline(save_to_db=save_to_db)

    if result['status'] == 'success':
        print("‚úÖ Pipeline executado com sucesso!")
        print(f"üìÑ M√©tricas geradas: {result.get('metrics_count', 0)}")
        
        # Informa√ß√£o sobre salvamento no banco de dados
        if save_to_db:
            if result.get('db_available', False):
                print("‚úÖ Dados foram salvos em arquivos e no banco de dados")
            else:
                print("‚ö†Ô∏è Driver do banco de dados n√£o dispon√≠vel - dados salvos apenas em arquivos locais")
        else:
            print("‚ÑπÔ∏è Dados salvos apenas em arquivos locais (salvamento em BD desativado)")
            
        print(f"\nArquivos de sa√≠da:")
        print(f"- Bronze: {result.get('bronze_output')}")
        print(f"- Silver: {result.get('silver_output')}")
        print(f"- Gold: {result.get('gold_output')}")
        
        return result
    else:
        print(f"‚ùå Erro durante a execu√ß√£o do pipeline: {result.get('error', 'Erro desconhecido')}")
        return None

if __name__ == "__main__":
    import sys
    # Verifica se h√° um argumento --no-db para desativar o salvamento no banco de dados
    save_to_db = "--no-db" not in sys.argv
    run_and_show_results(save_to_db=save_to_db)